# By Anton Szilasi
# ajszilasi@gmail.com
# Honeybee started by Mostapha Sadeghipour Roudsari is licensed
# under a Creative Commons Attribution-ShareAlike 3.0 Unported License.

"""
Use this component to add an EnergyPlus earth tube to a Zone.

An earth tube is a long, underground metal or plastic pipe through which air is drawn. During cooling season, as air travels through the pipe, it gives up some of its heat to the surrounding soil and enters the room as cooler air. Similarly, during heating season, as air travels through the pipe, it receives some of its heat from the soil and enters the room as warmer air. Simple earth tubes in EnergyPlus can be controlled by a schedule and through the specification of minimum, maximum, and delta temperatures as described below. As with infiltration and ventilation, the actual flow rate of air through the earth tube can be modified by the temperature difference between the inside and outside environment and the wind speed. The basic equation used to calculate air flow rate of earth tube in EnergyPlus is:
EarthTubeFlowRate = E*F*[A+B|Tzone-Todb|+C(Windspeed)+D(Windspeed^2)]

Where:
1. E is the maximum amount of air mass flow rate of the earth tube expected at design conditions.
2. F is the schedule that modifies the maximum design volume flow fraction between 0 and 1.
3. Tzone is the temperature of the zone which the Earthtube is attached to and Todb is the outdoor dry blub temperature as odb stands for outdoor dry blub temperature.
3. A,B,C and D are Constant term flow coefficients,Temperature Term flow coefficients, Velocity Term flow coefficients and Velocity squared term flow coefficients respectively they are set at the default values of 0.606,2.0199999E-02,5.9800001E-04 and 0.0000000E+00.


Please see Energyplus Input Output reference for more details
http://apps1.eere.energy.gov/buildings/energyplus/pdfs/inputoutputreference.pdf

-
Provided by Honeybee 0.0.56

    Args:
        _HBZones: The Honeybee zones which Earthtubes will be added to.
        location_epwFile: The epwFile of the location. Used to find the ground temperature of the site so Earthtube calculations can be undertaken.
        Schedules_: This field can be a number of schedules which correspond sequentially to the _HBZones, if no schedule is given for a zone the default schedule "ALWAYS ON" will be used.  XXX is the name of the schedule that modifies the maximum design volume flow rate parameter \. This fraction between 0.0 and 1.0 is noted as Fschedule in the EarthTubeFlowRate equation the  .
        design_flowrate: This number(noted as Edesign in the above equation)is the maximum amount of air mass flow rate of the earth tube expected at design conditions the default is 0 m3/s. The flow rate is expressed in units of m3/s. The design value is modified by the schedule fraction(see previous field) and user specified coefficients(see last four fields).
        mincooling_temp: This is the indoor temperature (in Celsius) below which the earth tube is shut off the default is -100 degrees C. This lower temperature limit is intended to avoid overcooling a space and thus result in a heating load. For example, if the user specifies a minimum temperature of 20 C, earth tube is assumed to be available if the zone air temperature is above 20 C. If the zone air temperature drops below 20C, then earth tube is automatically turned off.
        maxheating_temp: This is the indoor temperature (in Celsius) above which the earth tube is shut off the default is 100 degrees C. This higher temperature limit is intended to avoid overheating a space and thus result in a cooling load.For example, if the user specifies a maximum temperature of 20 C, earth tube is assumed tobe available if the zone air temperature is below 20 C. If the zone air temperature rises above20C, then earth tube is automatically turned off.
        delta_temp: This is the temperature difference (in Celsius) between the indoor and outdoor air dry-bulb temperatures below which the earth tube is shut off the default is 2 degrees C. This is to allow the earth tube to be stopped either if the temperature outside is too warm and could potentially heat the space or if the temperature outside is too cold and could potentially cool the space. For example, if the user specifies a delta temperature of 2C, earth tube is assumed to be available if the temperature difference between indoor and outdoor temperature is at least 2 C. If the outside air dry-bulb temperature is less than 2C cooler or warmer than the indoor dry-bulb temperature, then the earth tube is automatically turned off.
        earthtube_type: This input as an integer from 1 to 3 defines the type of earth tube as one of the following options: Natural a value of 1, Exhaust a value of 2, or Intake a value of 3. A natural earth tube is assumed to be air movement/exchange that will not consume any fan energy or is the result of natural air flow through the tube and into the building. Values for fan pressure and efficiency for a natural flow earth tube are ignored. For either Exhaust or Intake, values for fan pressure and efficiency define the fan electric consumption. For Natural and Exhaustearth tubes, the conditions of the air entering the space are assumed to be equivalent to the air which is cooled or heated by passing along the pipe. For Intake earth tubes, an appropriate amount of fan heat is added to the air stream. The default is a Natural Earthtube
        fan_Prise: This is the pressure rise experienced across the fan in Pascals (N/m2) the default is 150 Pascals. This is a function ofthe fan and plays a role in determining the amount of energy consumed by the fan.
        fan_n: This is the total fan efficiency (a decimal number between 0.0 and 1.0) the default is 1. This is a function of the fan and plays a role in determining the amount of energy consumed by the fan.
        pipe_radius: This is the radius of the earth tube/pipe (in meters) the default is 1 meter. This plays a role in determining theamount of heat transferred from the surrounding soil to the air passing along the pipe. If the pipe has non-circular cross section, user can use the concept of hydraulic diameter where Radius = 2*Area/Perimeter.
        : This is the thickness of the pipe wall (in meters) the default is 0.2 meters. This plays a role in determining the amountof heat transferred from the surrounding soil to the air passing along the pipe.
        pipe_length: This is the total length of the pipe (in meters) the default is 15 meters. This plays a role in determining the amount of heat transferred from the surrounding soil to the air passing along the pipe. As the length of the pipe becomes longer, the amount of the heat transfer becomes larger
        pipe_depth: This is the depth of the pipe under the ground surface (in meters) the default is 3 meters. This plays a role in determining the temperature of the soil surrounding the pipe.
        soil_condition: An integer between 1 to 4 that defines the actual condition of the soil surrounding the earth tube: HeavyAndSaturated a value of 1, HeavyAndDamp a value of 2, HeavyAndDry a value of 3 or LightAndDry a value of 4. This determines the thermal diffusivity and thermal conductivity of the surrounding soil, which play a role in determining the amount of heat transferred from the surrounding soil to the air passing along the pipe. The default is 1.
        condition_groundsurface: An integer between 1 to 8 and defines the condition of the ground surface above the EarthTube, Bare and wet is a value of 1, Bare and moist is a value of 2, Bare and Arid is a value of 3, Bare and dry is a value of 4, Covered and wet is a value of 5, Covered and moist is a value of 6, Covered and arid is a value of 7, Covered and dry is a value of 8 the default is 1.
        pipe_thermal_conductivity: This is the thermal conductivity of the pipe (in W/m-K) default is 200 W/m-K. This plays a role in determining the amount of heat transferred from the surrounding soil to the air passing along the pipe.
        
    Returns:
        earthtube_HBZones: The Honeybee zones that have been modified by this component - these zones now contain an earth tube
"""

ghenv.Component.Name = "AddEarthtube"
ghenv.Component.Message = 'VER 0.0.56\nMar_19_2015'
ghenv.Component.Category = "Honeybee"
ghenv.Component.SubCategory = "08 | Energy | Set Zone Properties"
#compatibleHBVersion = VER 0.0.56\nFEB_01_2015
#compatibleLBVersion = VER 0.0.59\nFEB_01_2015
try: ghenv.Component.AdditionalHelpFromDocStrings = "1"
except: pass

import scriptcontext as sc
import uuid
import Grasshopper.Kernel as gh
import os

def checktheinputs(Schedules_,design_flowrate,mincooling_temp,maxheating_temp,delta_temp,earthtube_type,fan_Prise,fan_n,pipe_radius,pipe_depth,soil_condition,condition_groundsurface,pipe_thermal_conductivity):
    
    """This function checks all the inputs of the component to ensure that the component is stopped if there is anything wrong with the inputs
        
        Args:
            The arguements seen in the function definition are the same as the arguements on the panel.
            
        Returns:
            If there are any issues with the inputs this function will return -1 and the component will stop as per the code on line 315 else this function will return None"""
          
    # Check if the Honeybee hive is on the sticky
    
    if not sc.sticky.has_key('honeybee_release'):
        print "You should first let Honeybee to fly..."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, "You should first let Honeybee to fly...")
        return -1
    
    # Check if it is the latest Honeybee release 
    
    try:
        if not sc.sticky['honeybee_release'].isCompatible(ghenv.Component): return -1
    except:
        warning = "You need a newer version of Honeybee to use this compoent." + \
        "Use updateHoneybee component to update userObjects.\n" + \
        "If you have already updated userObjects drag Honeybee_Honeybee component " + \
        "into canvas and try again."
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, warning)
        return -1
        
    # Check design flow rate
    
    if design_flowrate < 0:
        warnMsg= "The design flow rate must be equal to or greater than zero m3/s! "
        print warnMsg
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, warnMsg)
        return -1 # Note to self just print a runtime warning DOES NOT stop the component from executing here I am making it return -1 so that main will stop executing due to ... on line ... XXX this is what Mostapha has done and its good practice.
        
    # Check the inputs of mincooling_temp and maxheating_temp
        
    if mincooling_temp > maxheating_temp:
        
        warnMsg= "The minimum zone temperature when cooling cannot be greater than the maximum zone temperature when heating!"
        print warnMsg
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, warnMsg)
        return -1
        
    # Check earthtube_type input
        
    if (earthtube_type < 1) or (earthtube_type > 3): # NOTE to self: if just earthtube_type == 1 or 2 or 3 the operator returns the first operand if it is True otherwise the 2nd operand this does NOT work!
        warnMsg= "earthtube_type input must be a integer of 1, 2 or 3! "
        print warnMsg
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, warnMsg)
        return -1
        
    # Check fan efficiency input
    
    if (fan_n < 0) or (fan_n > 1):
        
        warnMsg =  "fan_n - total fan efficiency must be a decimal number between 0 and 1!"
        print warnMsg
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, warnMsg)
        return -1
        
   # Check soil condition input
        
    if (soil_condition < 1) or (soil_condition > 4):
        
        warnMsg = "soil_condition input must be a integer of 1,2,3 or 4!"
        print warnMsg
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, warnMsg)
        return -1
        
    # Check ground surface condition input
        
    if (condition_groundsurface < 1) or (condition_groundsurface > 8):
        
        warnMsg = "condition_groundsurface input must be a integer of 1,2,3,4,5,6,7 or 8!"
        print warnMsg
        w = gh.GH_RuntimeMessageLevel.Warning
        ghenv.Component.AddRuntimeMessage(w, warnMsg)
        return -1
        
    # Check schedules by making sure that the schedules specified in Schedule_ exist lines 127 to 148 these lines of code are taken from setEPZoneSchedules component
    
    schedules = [Schedule_]
    HBScheduleList = sc.sticky["honeybee_ScheduleLib"].keys()
    
    for scheduleList in schedules:
        for schedule in scheduleList: 
            
            if schedule!=None:
                schedule= schedule.upper()
            
            # If schedule is not contained within a CSV file that is the schedule wasn't created by the user using the component Honeybee_Create CSV schedule
            
            if schedule!=None and not schedule.lower().endswith(".csv") and schedule not in HBScheduleList:
                msg = "Cannot find " + schedule + " in Honeybee schedule library."
                print msg
                ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                return -1
            
            # If schedule is contained within a CSV file created by the user using the component Honeybee_Create CSV schedule
            
            elif schedule!=None and schedule.lower().endswith(".csv"):
                
                # check if csv file exists
                
                if not os.path.isfile(schedule):
                    msg = "Cannot find the schedule file: " + schedule
                    print msg
                    ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, msg)
                    return -1
    

def main(Schedule_,design_flowrate,mincooling_temp,maxheating_temp,delta_temp,earthtube_type,fan_Prise,fan_n,pipe_radius,pipe_thickness,pipe_length,pipe_depth,soil_condition,condition_groundsurface,pipe_thermal_conductivity):
    
    """This function is the heart of this component it takes all the component arguments and writes an earth tube into the IDF file for each Honeybee zone connected to this component
    
    Args:
        The arguements seen in the function definition are the same as the arguements on the panel.
            
    Returns:
        The properties of the earth tubes of the Honeybee zones connected to this component these properties are then written to an IDF file in Honeybee_ Run Energy Simulation component."""
    
    
    hb_hive = sc.sticky["honeybee_Hive"]()
    
    # Call the Honeybee zones from the hive
    
    HBObjectsFromHive = hb_hive.callFromHoneybeeHive(_HBZones)
    
    # Write the properties of the earth tube for each Honeybee zone connected to this component
    
    for zoneCount,zone in enumerate(HBObjectsFromHive):
        
        # Writing earth tube schedules
        
        try: zone.ETschedule = Schedule_[zoneCount] # If zoneCount index in range of zoneCount
        except IndexError:
            zone.ETschedule = "ALWAYS ON" # If zoneCount index is not in range of zoneCount or there is no schedule input set to default schedule of "ALWAYS ON"
        
        # Writing earth tube design flow rate
        
        zone.design_flow_rate = design_flowrate
        
        # Writing earth tube minimum cooling temp
        
        zone.mincooltemp = mincooling_temp
        
        # Writing earth tube maximum heating temp
        
        zone.maxheatingtemp = maxheating_temp
        
        # Writing earth tube delta T
        
        zone.delta_temp = delta_temp
        
        # Writing earth tube type 
        
        if earthtube_type == 1:
            
            zone.et_type = "NATURAL"
            
        if earthtube_type == 2:
            
            zone.et_type = "EXHAUST"
            
        if earthtube_type == 3:
            
            zone.et_type = "INTAKE"
        
        # Writing earth tube pressure rise across the fan
        
        zone.fanprise = fan_Prise
        
        # Writing earth tube fan efficiency
        
        zone.efficiency = fan_n
        
        # Writing earth tube earthtube pipe radius
        
        zone.piperadius = pipe_radius
        
        # Writing earth tube pipe thickness
        
        zone.thick = pipe_thickness
        
        # Writing earth tube pipe length 
        
        zone.length = pipe_length
        
        # Writing earth tube pipe thermal conductivity
        
        zone.thermal_k = pipe_thermal_conductivity
        
        # Writing earth tube depth - below ground surface
        
        zone.pipedepth = pipe_depth
        
        # Soil condition USED in directly in IDF and USED in CalcSoilSurfTemp preprocess to get Annual Average Soil Surface Temperature,Amplitude of Soil Surface Temperature,Phase Constant of Soil Surface Temperature
        
        def soilconditionforIDF(soil_condition):
            
            """ A function which takes the soil_condition from the panel and returns the required EnergyPlus IDF input for example an input on the panel of 1 corresponds to HeavyAndSaturated.
                
                Args:
                    soil_condition: As on the panel arguement soil_condition an integer between 1 to 4 that defines the actual condition of the soil surrounding the earth tube
                    
                Returns:
                    soil_cond: A string which returns the EnergyPlus input which corresponds to 1,2,3 or 4 as described on the panel arguement soil_condition
                    e.g 1 = "HeavyAndSaturated"
            """
        
            if soil_condition == 1:
                
                soil_cond = "HeavyAndSaturated"
                
            if soil_condition == 2:
                
                soil_cond = "HeavyAndDamp"
                
            if soil_condition == 3:
                
                soil_cond = "HeavyAndDry"
                
            if soil_condition == 4:
                
                soil_cond = "LightAndDry"  
            
            return soil_cond
            
        # The condition of the ground surrounding the earth tube used both writing to IDF and in CalcSoilSurfTemp preprocess to get Annual Average Soil Surface Temperature,Amplitude of Soil Surface Temperature,Phase Constant of Soil Surface Temperature which are then subsequently used in IDF
        
        zone.soil_cond = soilconditionforIDF(soil_condition)
        
        # Condition of ground surface above the earth tube only used in CalcSoilSurfTemp preprocess to get Annual Average Soil Surface Temperature,Amplitude of Soil Surface Temperature,Phase Constant of Soil Surface Temperature which are then used in IDF

        zone.cond_groundsurface = condition_groundsurface
        
    # Add modified zones to dictionary
    
    ModifiedHBZones = hb_hive.addToHoneybeeHive(HBObjectsFromHive, ghenv.Component.InstanceGuid.ToString() + str(uuid.uuid4()))
    
    return ModifiedHBZones


if checktheinputs(Schedule_,design_flowrate,mincooling_temp,maxheating_temp,delta_temp,earthtube_type,fan_Prise,fan_n,pipe_radius,pipe_depth,soil_condition,condition_groundsurface,pipe_thermal_conductivity) != -1:

    if _HBZones and _HBZones[0]!= None:
        earthtube_HBZones = main(Schedule_,design_flowrate,mincooling_temp,maxheating_temp,delta_temp,earthtube_type,fan_Prise,fan_n,pipe_radius,pipe_thickness,pipe_length,pipe_depth,soil_condition,condition_groundsurface,pipe_thermal_conductivity)
